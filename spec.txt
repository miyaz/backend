■概要

ELB のバックエンドの状態や応答時間／データ内容／サイズ等、特定の状況下で発生する問題が申告された際に
調査に用いるバックエンドアプリ

例えば、パラメータで応答時間 4 秒 を付加したリクエストを送信すると 4 秒後に応答を返す、など。

■環境

Go 実装
基本的には ECS でも実行できるようにコンテナ実行(Dockerfile配布)を想定（バイナリを直接EC2上での実行も可
Linux上で動くことを想定（リソース状況確認に/procをパースするライブラリを使うため）
see.  https://golang.hotexamples.com/jp/examples/github.com.c9s.goprocinfo.linux/-/ReadMemInfo/golang-readmeminfo-function-examples.html

■リクエスト

・GET パラメータのみ
・URLパスはなんでもよい
・クエリストリングで動作が変わる

sleep=1000[-3000]
  応答時間(ミリ秒)を指定する
  - で範囲指定することで範囲内でランダムな値を使用する

cpu=80
  CPU使用率を指定する(0-100の範囲で指定可)
  マルチコアの場合でもトータルのCPU使用率をターゲットに調整する
  0 ・・・ 負荷停止
  0 以上・ その使用率を上回るまで負荷をかけ、下回らない状態を維持する

mem=80
  メモリ使用率を指定する(0-100の範囲で指定可)
  指定されたメモリ量をヒープメモリとしてプロセス内に確保します
  0 ・・・ メモリ開放
  0 以上・ その使用率に達するサイズのメモリを確保したまま維持する。指定より上回った分は開放する

size=1000[-3000]
  応答サイズ（バイト）を指定する
  ダミー（ランダム）の文字列で指定サイズの文字列を応答に含める
  - で範囲指定することで範囲内でランダムな値を使用する

ifhostname=go-sample-087q23ias6
ifipaddr=172.16.0.23
  指定されたhostname/ipaddrに一致した場合のみリソース操作を適用する
  一致しない場合はnoopとなる

addheaders=hoge1,hoge2,fuga3
hoge1=1234
hoge2=4567
fuga3=2345
  addheadersでカンマ区切りでヘッダ名を指定する
  指定されたヘッダ名のパラメータから値を取得し、その「ヘッダ名=値」を応答ヘッダに追加する
  すでに存在する場合は上書きする
  ELB がヘッダをどう加工しているかと確認したい場合の使用を想定

clearheaders=hoge1,hoge2,fuga3
  clearheadersでカンマ区切りでヘッダ名を指定する
  指定されたヘッダは応答ヘッダから削除する

status=503
  ステータスコードを指定する(400,403,404,500,502-504を指定可能)
  指定されたステータスコードで応答する






■レスポンス

下記内容を返す
・リクエストヘッダ
・ホスト名
・プライベートIP
・リクエスト受信完了時刻
・レスポンス応答開始時刻
・CPU 使用率
・メモリ使用率
・同時処理数

